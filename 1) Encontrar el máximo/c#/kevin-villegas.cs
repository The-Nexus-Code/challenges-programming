// Este programa recibe un array de n√∫meros enteros y devuelve el valor m√°ximo contenido en √©l.
// Es decir, analiza todos los elementos del array y encuentra el mayor valor num√©rico.

// Restricciones:
// `1 <= longitud del array <= 100`
// - Esto significa que el array debe tener al menos un elemento y como m√°ximo cien.
// `-10‚Å¥ <= nums[i] <= 10‚Å¥`
// - Cada n√∫mero dentro del array puede ir desde -10.000 hasta 10.000.

// üìå Ejemplos

// ### Ejemplo 1
// - Entrada: [1, 3, 5, 7]
// - En este caso, todos los n√∫meros son positivos y est√°n en orden ascendente.
// - Salida esperada: 7 (porque es el n√∫mero m√°s alto del array)

// ### Ejemplo 2
// - Entrada: [-1, -5, -3]
// - Aqu√≠ todos los n√∫meros son negativos.
// - Salida esperada: -1 (porque, aunque es negativo, es el "menos negativo" o el mayor)

// ## üöÄ C√≥mo usar
// 1. Aseg√∫rate de tener un entorno que soporte el lenguaje de programaci√≥n que est√°s utilizando.
//    Por ejemplo: un navegador con consola para JavaScript, un int√©rprete para Python, etc.
// 2. Llama a la funci√≥n con un array como argumento.
//    Por ejemplo: obtenerMaximo([1, 2, 3])
// 3. Obtendr√°s como resultado el n√∫mero m√°s alto de ese array.
//    Es decir, la funci√≥n devolver√° un √∫nico valor que representa el m√°ximo.

internal class Program
{
    private static void Main(string[] args)
    {
        // Llamada a la funci√≥n con un array de ejemplo
        var resultado = ObtenerMaximo([1, 3, 5, 7]);
        var negativo = ObtenerMaximo([-1, -5, -3]);
        var mixto = ObtenerMaximo([-1, 5, 3, -7]);
        Console.WriteLine(resultado);
        Console.WriteLine(negativo);
        Console.WriteLine(mixto);
    }
    private static double ObtenerMaximo(List<double> numbers) => numbers.Max();
}